# 🐳 Docker Compose LogoDouman - Version Corrigée Complète
# Toutes les incohérences résolues pour une exécution parfaite

services:
  # 🗄️ PostgreSQL - Base de données
  postgres:
    image: postgres:16-alpine
    container_name: logodouman-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: logodouman
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: logodouman123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "55432:5432"
    networks:
      - logodouman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d logodouman"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 🔴 Redis - Cache et sessions
  redis:
    image: redis:7-alpine
    container_name: logodouman-redis
    restart: unless-stopped
    command: redis-server --requirepass redis123 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - logodouman-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 🔧 Backend - API Node.js avec Prisma
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: logodouman-backend
    restart: unless-stopped
    environment:
      # 🗄️ Base de données
      - DATABASE_URL=postgresql://postgres:logodouman123@postgres:5432/logodouman
      
      # 🔴 Cache Redis  
      - REDIS_URL=redis://:redis123@redis:6379
      - REDIS_PASSWORD=redis123
      
      # 🔐 Sécurité
      - JWT_SECRET=logodouman-super-secret-jwt-key-docker-2024
      - BCRYPT_ROUNDS=12
      
      # 🌐 Configuration serveur
      - NODE_ENV=production
      - PORT=4002
      - HOST=0.0.0.0
      
      # 🔗 CORS - Communication avec frontend
      - CORS_ORIGIN=http://localhost:3000,http://frontend:3000,http://127.0.0.1:3000
      
      # 📁 Stockage
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=5242880
      
      # 📊 Logging
      - LOG_LEVEL=info
      - LOG_FILE=/app/logs/app.log
      
      # 🛡️ Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      
    ports:
      - "4002:4002"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - ./backend/.env.docker:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - logodouman-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4002/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s

  # 🌐 Frontend - Next.js optimisé
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: http://localhost:4002
    container_name: logodouman-frontend
    restart: unless-stopped
    environment:
      # 🌐 Configuration Next.js
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      
      # 🔗 API Backend (pour le navigateur)
      - NEXT_PUBLIC_API_URL=http://localhost:4002
      - NEXT_PUBLIC_SITE_URL=http://localhost:3000
      
      # 🔗 API Backend interne (pour SSR)
      - INTERNAL_API_URL=http://backend:4002
      
      # 🎨 Configuration UI
      - NEXT_PUBLIC_APP_NAME=LogoDouman
      - NEXT_PUBLIC_APP_VERSION=2.1.0
      
      # 🔧 Next.js optimisations
      - NEXT_TELEMETRY_DISABLED=1
      
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/.env.docker:/app/.env.local:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - logodouman-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 🗄️ Adminer - Interface base de données
  adminer:
    image: adminer:4.8.1
    container_name: logodouman-adminer
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
      - ADMINER_PLUGINS=tables-filter tinymce
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - logodouman-network

# 💾 Volumes persistants
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

# 🌐 Réseau isolé
networks:
  logodouman-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
