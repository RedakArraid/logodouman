// Schéma Prisma pour LogoDouman - E-commerce Complet

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CATÉGORIES =====
model Category {
  id          String   @id @default(uuid())
  name        String
  icon        String
  image       String?
  description String
  status      String   @default("active")
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ===== PRODUITS =====
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  image       String?
  description String
  stock       Int      @default(0)
  status      String   @default("active")
  sku         String?
  material    String?
  lining      String?
  coating     String?
  dimensions  String?
  weight      Float?
  shape       String?
  styles      String[]
  pattern     String?
  decoration  String?
  closure     String?
  handles     String?
  season      String?
  occasion    String?
  features    String[]
  colors      String[]
  gender      String?
  ageGroup    String?
  orderItems  OrderItem[]
  inventory   Inventory?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ===== UTILISATEURS =====
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  role          String         @default("user")
  orders        Order[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// ===== CLIENTS =====
model Customer {
  id            String   @id @default(uuid())
  email         String   @unique
  firstName     String
  lastName      String
  phone         String?
  address       Address?
  orders        Order[]
  totalSpent    Float    @default(0)
  loyaltyPoints Int      @default(0)
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ===== ADRESSES =====
model Address {
  id         String   @id @default(uuid())
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  street     String
  city       String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ===== COMMANDES =====
model Order {
  id            String      @id @default(uuid())
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  taxAmount     Float       @default(0)
  shippingCost  Float       @default(0)
  discountAmount Float      @default(0)
  promotionCode String?
  items         OrderItem[]
  payment       Payment?
  shipping      Shipping?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// ===== ÉLÉMENTS DE COMMANDE =====
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  totalPrice Float
  createdAt DateTime @default(now())
}

// ===== PAIEMENTS =====
model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  gateway       String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// ===== LIVRAISONS =====
model Shipping {
  id           String         @id @default(uuid())
  orderId      String         @unique
  order        Order          @relation(fields: [orderId], references: [id])
  method       ShippingMethod
  status       ShippingStatus @default(PENDING)
  trackingCode String?
  carrier      String?
  estimatedDelivery DateTime?
  actualDelivery   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// ===== PROMOTIONS =====
model Promotion {
  id            String   @id @default(uuid())
  code          String   @unique
  name          String
  description   String
  type          PromotionType
  value         Float
  minAmount     Float?
  maxUses       Int?
  usedCount     Int      @default(0)
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ===== STOCK ET INVENTAIRE =====
model Inventory {
  id        String   @id @default(uuid())
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  reserved  Int      @default(0)
  available Int      @default(0)
  lowStockThreshold Int @default(10)
  lastUpdated DateTime @default(now())
}

// ===== NOTIFICATIONS =====
model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String?
  user      User?            @relation(fields: [userId], references: [id])
  metadata  Json?
  createdAt DateTime         @default(now())
}

// ===== ENUMS =====
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  PICKUP
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum NotificationType {
  ORDER_STATUS
  STOCK_ALERT
  PAYMENT
  SHIPPING
  SYSTEM
} 